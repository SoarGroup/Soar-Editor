options
{
  LOOKAHEAD = 3;
  CHOICE_AMBIGUITY_CHECK = 3;
  OTHER_AMBIGUITY_CHECK = 2;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = true;
}

PARSER_BEGIN(SoarParser)
package com.soartech.soar.ide.core.ast;
import java.util.*;
/**
	@author Brad Jones
	if you are looking at the java file, it isn't going to make a lot of sense
	I used the Java Compiler Compiler to make the lexer and parser
	the homepage is http://www.metamata.com
*/
public class SoarParser {}
PARSER_END(SoarParser)

SKIP: 
{
	 < "#" (~["\n","\r"])*>
	|<";#" (~["\n","\r"])*>
	|" "
	|"\t"
	|"\n"
	|"\r"
}

TOKEN:
{
     <RARROW:		"-->">
	 |<SAME_TYPE:	"<=>">
	 |<GEQUAL:		">=">
	 |<LDISJUNCT:	"<<">
	 |<LEQUAL:		"<=">
	 |<NEQUAL:		"<>">
	 |<RDISJUNCT:	">>">
	 |<AMPERSAND:   "&">
	 |<ATSIGN:      "@">
	 |<CARET:		"^">
	 |<COMMA:		",">
	 |<EMARK:		"!">
	 |<EQUAL:		"=">
	 |<GREATER:		">">
	 |<HYPHEN:		"-">
	 |<LBRACE:		"{">
	 |<LESS:		"<">
	 |<LPAREN:		"(">
	 |<PERIOD:		".">
	 |<PLUS:		"+">
	 |<QMARK:		"?">
     |<RBRACE:		"}">
	 |<RPAREN:		")">
	 |<TILDE:		"~">
	 |<LSQBRACET:   "[">
	 |<RSQBRACET:   "]">
	 |<QUOTE:		"\"">
     |<PRODTYPE:  (":chunk"|":default"|":o-support"|":i-support"|":monitor"|":interrupt"|":template")>
	 // I know the variable looks weird but it does appear to be correct
	 |<VARIABLE: "<" (["a"-"z","A"-"Z","0"-"9","$","%","&","*","+","-","/",":","=","?","_"])+ ">" >
	 |<INTEGER_CONST: (["+","-"])? (["0"-"9"])+ >
	 |<SYMBOLIC_CONST: (["a"-"z","A"-"Z","0"-"9","$","%","&","*","+","-","/",":","<","=",">","?","_"])+ | ("|" (~["|"] | ("\\" "|"))* "|") >
	 |<FLOATING_POINT_CONST: (["+","-"])? (["0"-"9"])* "." (["0"-"9"])+ >
}

SoarProductionAst soarProduction() :
{
	SoarProductionAst sp = new SoarProductionAst();
	Token t;
	String s;
}
{
// its name	
	t = <SYMBOLIC_CONST>
	{   sp.setName(t.image);
		sp.setStartLine(t.beginLine);
	}
// optional comment
	handleDocumentationQuote(sp)
// production type
	(s = productionType() { sp.setProductionType(s); } )?
	conditionSide(sp) 
	<RARROW>
	actionSide(sp) 
	<EOF>
	{
        return sp;
    }
}

String productionType() :
{
	Token t;
}
{
	t = <PRODTYPE>{
		return t.image;
	}
}

JAVACODE
void handleDocumentationQuote(SoarProductionAst sp)
{
	Token start = getToken(1);
	if(start.kind == QUOTE) {
		getNextToken();
		Token tok = getToken(1);
		while(tok.kind != QUOTE && tok.kind != EOF) {
			getNextToken();
			tok = getToken(1);
		}
		if(tok.kind == EOF)
		{		    
			ParseException e = new ParseException("Documentation quote not closed.");
		    e.currentToken = start;
			throw e;
		}
		getNextToken();
	}
	sp.setComment("");
}

/////////////////////////////////////////////////////////////
// The LHS of the production
//
// Added gp-style square brackets to DisjunctionTest. -Miller 5/19/2011
/*
	The grammar that this recognizes
	<ConditionSide> 			::= <Condition>+
	<FirstCondition>			::= '(' "state" VARIABLE <AttributeValueTest>* ')' 
	<Condition>					::= ['-'] PositiveCondition
	<PositiveCondition>	    	::= <ConditionForOneIdentifier>
									| '{' <Condition>+ '}'
	<ConditionForOneIdentifier>	::= '(' VARIABLE <AttributeValueTest>* ')'
	<AttributeValueTest>		::= ['-'] ^ <AttributeTest> ['.'<AttributeTest>]* <ValueTest>* 
	<AttributeTest>				::= <Test>
	<ValueTest>					::= <Test> ['+'] | '(' (VARIABLE)? <AttributeValueTest>* ')'
	<Test> 						::= <ConjunctiveTest> | <SimpleTest>
	<ConjunctiveTest>			::= '{' <SimpleTest>+ '}'
	<SimpleTest>				::= <DisjunctionTest> | <RelationalTest>
	<DisjunctionTest>			::= '<<' <Constant>+ '>>'
                                    | '[' <Constant>+ ']'
	<RelationalTest>            ::=	 [<Relation>] <SingleTest>
	<Relation>					::=  '<>' | '<=>' | '<' | '<=' | '>=' | '>' | '='
	<SingleTest>				::= <Constant> | VARIABLE
	<Constant> 					::= FLOATING_POINT_CONST | INTEGER_CONST | SYMBOLIC_CONST
*/

// Ok
void conditionSide(SoarProductionAst sp) :
{
	Condition cond;
}
{
	(cond = condition()
	{
		if(cond != null)
			sp.addCondition(cond);
	})+
}

// Ok
Condition condition() :
{
	boolean negated = false;
	PositiveCondition pcond;
}
{
	(<HYPHEN> { negated = true; })? 
	(pcond = positiveCondition())
	{ return new Condition(negated,pcond); }
}

// Ok
PositiveCondition positiveCondition() : 
{
	ConditionForOneIdentifier cfoi;
	Condition cond;
	PositiveCondition retVal;
	
}
{
	(cfoi = conditionForOneIdentifier()) {
		return new PositiveCondition(cfoi);
	}
	| (<LBRACE>
		{
			retVal = new PositiveCondition();
		} 
		(cond = condition()
		{
			retVal.add(cond);
		}
		)+ <RBRACE>
	)
	{ return retVal; }
}

// Ok
ConditionForOneIdentifier conditionForOneIdentifier() :
{
	Token t;
	AttributeValueTest avt;
	ConditionForOneIdentifier cfoi;
	boolean hasState = false;
}
{
	<LPAREN>
	( (t = <SYMBOLIC_CONST> { 
		if(t.image.equals("state"))	
			hasState = true; 
		else 
		{
		    ParseException e = new ParseException("only state allowed.");
		    e.currentToken = t;
			throw e;
	    }
	})? 
	t = <VARIABLE>
	{
		cfoi = new ConditionForOneIdentifier(hasState,new Pair(t.image, t.beginOffset, t.endOffset));
	})
	(avt = attributeValueTest()
	{
		cfoi.add(avt);
	})*
	<RPAREN>	
	{ return cfoi; }
}

// Ok
AttributeValueTest attributeValueTest() :
{
	AttributeValueTest avt = new AttributeValueTest();
	AttributeTest at;
	ValueTest vt;
}
{
	(<HYPHEN>
	{
		avt.negate();
	})? 
	<CARET> 
	(at = attributeTest())
	{ avt.add(at); }
	(<PERIOD> at = attributeTest() { avt.add(at); })* 
	(vt = valueTest() { avt.add(vt); } )*
	{ return avt;}
	
}

// Ok
AttributeTest attributeTest() :
{
	Test t;
}
{
	t = test() 
	{ return new AttributeTest(t); }
}

// Ok
ValueTest valueTest() :
{
	ValueTest vt;
	Test t;
	Token var;
	AttributeValueTest avt;
}
{
    (
        t = test() {
            vt = new ValueTest(t);
        } 
        (<PLUS> { 
            vt.acceptablePreference();
        })?
    ) {
        return vt;
    }


    | (
        <LPAREN> {
            vt = new ValueTest();
        }
        ((var = <VARIABLE>) {
            vt.setVariable(new Pair(var.image, var.beginOffset, var.endOffset));
        })?
        
        (avt = attributeValueTest() {
            vt.addAttributeValueTest(avt);
        })*
        <RPAREN>
    ) {

        return vt;


    }

    // | ConditionsForOneId() John Laird told me to take this out 7/6/99 
}

// Ok
Test test() :
{
	ConjunctiveTest ct;
	SimpleTest st;
}
{
	ct = conjunctiveTest()
	{ return new Test(ct); }
	| st = simpleTest()
	{ return new Test(st); }
} 

// Ok
ConjunctiveTest conjunctiveTest() :
{ 
	ConjunctiveTest retVal = new ConjunctiveTest();
	SimpleTest st;
}
{
	<LBRACE>
	( st = simpleTest() 
	{ retVal.add(st);}
	)+
	<RBRACE>
	{ return retVal; }
}

// Ok
SimpleTest simpleTest() :
{
	DisjunctionTest dt;
	RelationalTest rt;
}
{
	 dt = disjunctionTest() 
	 { return new SimpleTest(dt); }
	 | rt = relationalTest() 
	 { return new SimpleTest(rt);} 
}


// Ok
DisjunctionTest disjunctionTest() :
{
	DisjunctionTest dt = new DisjunctionTest();
	Constant c;
}
{
	<LDISJUNCT>
	( c = constant() { dt.add(c); })+
	<RDISJUNCT>
	{ return dt;}
	|
	<LSQBRACET>
	( c = constant() { dt.add(c); })+
	<RSQBRACET>
	{ return dt;}
}

// Ok
RelationalTest relationalTest() :
{
	int r = RelationalTest.EQ;
	SingleTest st;
}
{
	(r = relation())?
	st = singleTest() {
		return new RelationalTest(r,st);
	}
}

// Ok
int relation() :
{}
{
	 <NEQUAL> {
	 	return RelationalTest.NEQ;
	}
	|<SAME_TYPE> {
		return RelationalTest.EQUIV;
	}
	|<LESS> {
		return RelationalTest.LT;
	}
	|<LEQUAL> {
		return RelationalTest.LTE;
	}
	|<GEQUAL> {
		return RelationalTest.GTE;
	}
	|<GREATER> {
		return RelationalTest.GT;
	}
	|<EQUAL> {
		return RelationalTest.EQ;
	}
}

// Ok
SingleTest singleTest() :
{
	Token t;
	Constant c;
}
{
	t = <VARIABLE>	{
		return new SingleTest(new Pair(t.image, t.beginOffset, t.endOffset));
	}
	| 
	c = constant() {
	  	return new SingleTest(c);
	}
}

// Ok
Constant constant() :
{
	Token t;
}
{
    t = <FLOATING_POINT_CONST> {
        try {
            return new Constant(Float.parseFloat(t.image), t.beginOffset, t.endOffset);
        }
        catch(NumberFormatException nfe) {
            return new Constant(t.image, t.beginOffset, t.endOffset);
        }
    }
	| t = <INTEGER_CONST>	{
		try {
			return new Constant(Integer.parseInt(t.image), t.beginOffset, t.endOffset);
		}
		catch(NumberFormatException nfe) {
			return new Constant(t.image, t.beginOffset, t.endOffset);
		}
	}
	| t = <SYMBOLIC_CONST> {
		return new Constant(t.image, t.beginOffset, t.endOffset);
	}
}


//////////////////////////////////////////////////////////////
// Action Side
/* =====================================================================

   Grammar for right hand sides of productions

   <ActionSide> ::= <Action>*
   <Action> ::= <VarAttrValMake> | <FunctionCall>
   <VarAttrValMake> ::= ( VARIABLE <AttributeValueMake>+ )
   <FunctionCall> ::= ( <FunctionName> (<RHSValue>)* )
   <FunctionName> ::= SYMBOLIC_CONST | + | -
     (WARNING: might need others besides +, - here if the lexer changes)
   <RHSValue> ::= <Constant> | <FunctionCall> | VARIABLE
   <Constant> ::= SYMBOLIC_CONST | INTEGER_CONST | FLOATING_POINT_CONST
   <AttributeValueMake> ::= ^ <RHSValue> ['.'<RHSValue>]* <ValueMake>+
   <ValueMake> ::= <RHSValue> <Preferences>
   <Preferences> ::= <PreferenceSpecifier>*   
   <PreferenceSpecifier> ::= <NaturallyUnaryPreference> [,]
                            | <ForcedUnaryPreference>
                            | <BinaryPreference> <RHSValue> [,]
   <NaturallyUnaryPreference> ::= + | - | ! | ~ 
   <BinaryPreference> ::= > | = | < 
   <ForcedUnaryPreference> ::= <BinaryPreference> [,]   
===================================================================== */

// Done
void actionSide(SoarProductionAst sp) :
{
	Action a;
}
{
	(a = action() { 
		if(a != null)
			sp.addAction(a);
	})*
}

// Ok
Action action() :
{
	Token t;
	VarAttrValMake vavm;
	FunctionCall fc;
}
{
	vavm = varAttrValMake()
	{
		return new Action(vavm);
	}
	| fc = functionCall()
	{
		return new Action(fc);
	}
}

// Ok
VarAttrValMake varAttrValMake() :
{
	Token t;
	VarAttrValMake retVal;
	AttributeValueMake avm;
}
{
	<LPAREN>
	(t = <VARIABLE> 
	{ retVal = new VarAttrValMake(new Pair(t.image, t.beginOffset, t.endOffset));})
	(avm = attributeValueMake() { retVal.add(avm); })+ 
	<RPAREN>
	{ return retVal; }
}

// Ok
FunctionCall functionCall() :
{
	Pair funcName;
	FunctionCall funcCall;
	RHSValue rhsv;
}
{
	<LPAREN>	
	(funcName = functionName() { funcCall = new FunctionCall(funcName); } )
	(
	rhsv = rhsValue() { funcCall.add(rhsv); }
	)*
	<RPAREN>	
	{ return funcCall; }
}

// Ok
Pair functionName() :
{
	Token t;
}
{	
	(t = <SYMBOLIC_CONST> {
		return new Pair(t.image, t.beginOffset, t.endOffset);
	} )
	| (t = <PLUS> {
		return new Pair(t.image, t.beginOffset, t.endOffset);
	})
	| (t = <HYPHEN> {
		return new Pair(t.image, t.beginOffset, t.endOffset);
	})
}

// Ok
RHSValue rhsValue() :
{
	Token t;
	Constant c;
	FunctionCall fc;
}
{
	(c = constant()
	{
		return new RHSValue(c);
	})
	| (fc = functionCall()
	{ 
		return new RHSValue(fc);
	} )
	| (t = <VARIABLE> 
	{ 
		return new RHSValue(new Pair(t.image, t.beginOffset, t.endOffset)); 
	})
}

// Ok
AttributeValueMake attributeValueMake() :
{
	AttributeValueMake avm = new AttributeValueMake();
	RHSValue rhsv;
	ValueMake vm;
}
{
	<CARET> (rhsv = rhsValue() 
	{ avm.add(rhsv); })
	
	(<PERIOD> rhsv = rhsValue() { avm.add(rhsv); })* 
	( vm = valueMake() { avm.add(vm); } )+
	{return avm; }
}


// Ok 
ValueMake valueMake() :
{
	PreferenceSpecifier ps;
	RHSValue rhsv;
	ValueMake vm;
}
{
	rhsv = rhsValue() 
	{ vm = new ValueMake(rhsv); }
	 
	(	(ps = preferenceSpecifier()
		{ vm.add(ps); })
	)*
	{ return vm; }
	
}


// Ok
PreferenceSpecifier preferenceSpecifier() :
{
	int type;
	PreferenceSpecifier ps;
	RHSValue rhs;
}
{
	ps = naturallyUnaryPreference() (<COMMA>)?
	{ return ps; }
	| ps = forcedUnaryPreference()
	{ return ps; }
	| (type = binaryPreference()) (rhs = rhsValue()) (<COMMA>)?
	{ return new BinaryPreference(type,rhs); }
}

// Ok
NaturallyUnaryPreference naturallyUnaryPreference() :
{}
{
	<PLUS>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.ACCEPTABLE); }
	| <HYPHEN>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.REJECT); }
	| <EMARK>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.REQUIRE); }
	| <TILDE>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.PROHIBIT); }
	| <ATSIGN>
	{ return new NaturallyUnaryPreference(NaturallyUnaryPreference.ATSIGN); }
}

// Ok
int binaryPreference() :
{}
{
	<GREATER>
	{ return BinaryPreference.GREATER; }
	| <EQUAL>
	{ return BinaryPreference.EQUAL; }
	| <LESS>
	{ return BinaryPreference.LESS; }
	| <AMPERSAND>
	{ return BinaryPreference.AMPERSAND; }
	
}


// Ok
ForcedUnaryPreference forcedUnaryPreference() :
{ 
	int type;
}
{
	(type = binaryPreference()) (<COMMA>)?
	{ return new ForcedUnaryPreference(type); }
}

